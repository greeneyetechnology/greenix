#!/usr/bin/env bash
set -euo pipefail


SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
IFS=$'\n'
CERT=true
SSH_IDENTITY="$HOME/.ssh/greeneye_id_ed25519"
SSH_USER="yarok"
SSH_ARGS="-Y -A"
PATTERN=""


print_help() {
    cat << 'EOF'
Usage: gssh [OPTIONS] [PATTERN]

SSH into a Greeneye device using Tailscale.

Options:
    -h, --help                    Show this help message and exit
    --ignore-certificate          Skip certificate validation
    -i, --identity-path PATH      Path to SSH identity file (default: ~/.ssh/greeneye_id_ed25519)
    -u, --user USER               SSH user (default: yarok)
    -e, --ssh-extra-args ARGS     Additional SSH arguments (default: -Y -A)
    --debug                       Run with debug information

Arguments:
    PATTERN                       Optional pattern to filter device selection

Examples:
    gssh                          # Select from all available devices
    gssh robot                    # Filter devices containing 'robot'
    gssh -u admin robot           # Connect as 'admin' user to device containing 'robot'
EOF
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            print_help
            exit 0
            ;;
        --ignore-certificate)
            CERT=false
            shift
            ;;
        -i|--identity-path)
            SSH_IDENTITY="$2"
            shift 2
            ;;
        -u|--user)
            SSH_USER="$2"
            shift 2
            ;;
        -e|--ssh-extra-args)
            SSH_ARGS="$2"
            shift 2
            ;;
        -*)
            echo "Unknown option: $1"
            print_help
            exit 1
            ;;
        *)
            # Collect non-option arguments for the query
            PATTERN="$PATTERN $1"
            shift
            ;;
    esac
done

if [ "${DEBUG:-false}" = "true" ]; then
    set -x
fi

if [ -z "$PATTERN" ]; then
    PATTERN="."
fi

PATTERN=$(echo "$PATTERN" | xargs)

if $CERT; then
    if ! bash -c "$SCRIPT_DIR/../scripts/validate-certificate.sh --key-path $SSH_IDENTITY"; then
        echo "error: failed to validate certificate."
        exit 1
    fi
else
    echo "ignoring certificate..."
fi

selection=$(bash -c "$SCRIPT_DIR/../scripts/get-device-selection.sh $PATTERN" | cut -d' ' -f1) || {
    echo "error: failed to get device selection"
    exit 1
}

ssh_cmd="ssh -i $SSH_IDENTITY $SSH_ARGS $SSH_USER@$selection"
bash -c "$ssh_cmd"

