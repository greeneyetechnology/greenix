#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
IFS=$'\n'
CERT=true
SSH_IDENTITY="$HOME/.ssh/greeneye_id_ed25519"
SSH_USER="yarok"
SSH_ARGS="-Y -A"
PATTERN=""

print_help() {
    cat <<'EOF'
SSH into a Greeneye device using Tailscale.

Usage: gssh [OPTIONS] [PATTERN]

Options:
    -h, --help                      Show this help message and exit
    -i, --identity-path PATH        Path to SSH identity file (default: ~/.ssh/greeneye_id_ed25519)
    -u, --user USER                 SSH user (default: yarok)
    -e, --ssh-extra-args ARGS       Additional SSH arguments (default: -Y -A)
    --update                        Update fleet repository (default: 'rt-versions')
    --ignore-certificate            Skip certificate validation
    --debug                         Run with debug information

Arguments:
    PATTERN                         Optional pattern to filter device selection

Examples:
    gssh                            # Select from all available devices
    gssh robot                      # Filter devices containing 'robot'
    gssh -u admin robot             # Connect as 'admin' user to device containing 'robot'
EOF
}

while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
        print_help
        exit 0
        ;;
    --ignore-certificate)
        CERT=false
        shift
        ;;
    -i | --identity-path)
        SSH_IDENTITY="$2"
        shift 2
        ;;
    -u | --user)
        SSH_USER="$2"
        shift 2
        ;;
    -e | --ssh-extra-args)
        SSH_ARGS="$2"
        shift 2
        ;;
    --update)
        "$SCRIPT_DIR"/../scripts/get-fleet-clusters.sh --update
        exit 0
        ;;
    --debug)
        DEBUG=true
        shift
        ;;
    -*)
        echo "Unknown option: $1"
        print_help
        exit 1
        ;;
    *)
        # Collect non-option arguments for the query
        PATTERN="$PATTERN $1"
        shift
        ;;
    esac
done

if [ "${DEBUG:-false}" = "true" ]; then
    set -x
fi

PATTERN=$(echo "$PATTERN" | xargs)

if $CERT; then
    if ! bash -c "$SCRIPT_DIR/../scripts/validate-certificate.sh --key-path $SSH_IDENTITY"; then
        echo "error: failed to validate certificate."
        exit 1
    fi
else
    echo "ignoring certificate..."
fi

selection=$(bash -c "$SCRIPT_DIR/../scripts/get-device-selection.sh $PATTERN" | cut -d' ' -f1) || true

if [ -z "$selection" ]; then
    echo "error: empty selection."
    exit 1
fi

ssh_cmd="ssh -i $SSH_IDENTITY $SSH_ARGS $SSH_USER@$selection"
bash -c "$ssh_cmd"
